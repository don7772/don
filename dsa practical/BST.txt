#include <iostream>
#include <queue>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

class BST {
public:
    Node* root;

    BST() {
        root = nullptr;
    }

    // Insert
    Node* insert(Node* node, int value) {
        if (node == nullptr)
            return new Node(value);
        if (value < node->data)
            node->left = insert(node->left, value);
        else
            node->right = insert(node->right, value);
        return node;
    }

    // Search
    bool search(Node* node, int value) {
        if (node == nullptr) return false;
        if (node->data == value) return true;
        if (value < node->data)
            return search(node->left, value);
        else
            return search(node->right, value);
    }

    // Minimum Value
    int minValue(Node* node) {
        Node* current = node;
        while (current && current->left != nullptr)
            current = current->left;
        return current->data;
    }

    // Height / Longest Path
    int height(Node* node) {
        if (node == nullptr) return 0;
        return 1 + max(height(node->left), height(node->right));
    }

    // Mirror / Swap Left and Right
    Node* mirror(Node* node) {
        if (node == nullptr) return nullptr;
        Node* temp = mirror(node->left);
        node->left = mirror(node->right);
        node->right = temp;
        return node;
    }

    // Delete Node
    Node* deleteNode(Node* root, int key) {
        if (root == nullptr) return root;

        if (key < root->data)
            root->left = deleteNode(root->left, key);
        else if (key > root->data)
            root->right = deleteNode(root->right, key);
        else {
            // Node with only one child or no child
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }

            // Node with two children
            root->data = minValue(root->right);
            root->right = deleteNode(root->right, root->data);
        }
        return root;
    }

    // Inorder Traversal
    void inorder(Node* node) {
        if (node == nullptr) return;
        inorder(node->left);
        cout << node->data << " ";
        inorder(node->right);
    }

    // Preorder Traversal
    void preorder(Node* node) {
        if (node == nullptr) return;
        cout << node->data << " ";
        preorder(node->left);
        preorder(node->right);
    }

    // Postorder Traversal
    void postorder(Node* node) {
        if (node == nullptr) return;
        postorder(node->left);
        postorder(node->right);
        cout << node->data << " ";
    }

    // Breadth First Search (BFS)
    void bfs(Node* root) {
        if (root == nullptr) return;
        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* temp = q.front();
            q.pop();
            cout << temp->data << " ";
            if (temp->left) q.push(temp->left);
            if (temp->right) q.push(temp->right);
        }
    }
};
int main() {
    BST tree;
    int values[] = {50, 30, 70, 20, 40, 60, 80};
    for (int val : values)
        tree.root = tree.insert(tree.root, val);

    // Insert new node
    tree.root = tree.insert(tree.root, 65);

    cout << "\nInorder: ";
    tree.inorder(tree.root);

    cout << "\nPreorder: ";
    tree.preorder(tree.root);

    cout << "\nPostorder: ";
    tree.postorder(tree.root);

    cout << "\nBFS: ";
    tree.bfs(tree.root);

    // Search
    cout << "\nSearch 40: " << (tree.search(tree.root, 40) ? "Found" : "Not Found");

    // Minimum value
    cout << "\nMinimum value: " << tree.minValue(tree.root);

    // Longest path
    cout << "\nHeight (Longest Path): " << tree.height(tree.root);

    // Delete a node
    tree.root = tree.deleteNode(tree.root, 30);
    cout << "\nAfter deleting 30, Inorder: ";
    tree.inorder(tree.root);

    // Mirror Tree
    tree.root = tree.mirror(tree.root);
    cout << "\nMirrored Tree Inorder: ";
    tree.inorder(tree.root);

    return 0;
}
