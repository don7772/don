#include <iostream>
#include <vector>
#include <queue>
using namespace std;

const int N = 5;
string landmarks[N] = {
    "Main Gate", "Library", "Canteen", "Computer Lab", "Classroom"
};

vector<int> adj[N];
bool visited[N];

void addEdge(int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u); // because it's an undirected graph
}

void DFS(int node) {
    visited[node] = true;
    cout << landmarks[node] << " -> ";

    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            DFS(neighbor);
        }
    }
}

void BFS(int start) {
    fill(visited, visited + N, false);
    queue<int> q;
    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int current = q.front(); q.pop();
        cout << landmarks[current] << " -> ";

        for (int neighbor : adj[current]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    // Creating graph (edges)
    addEdge(0, 1); // Main Gate - Library
    addEdge(0, 2); // Main Gate - Canteen
    addEdge(1, 3); // Library - Computer Lab
    addEdge(2, 4); // Canteen - Classroom
    addEdge(3, 4); // Computer Lab - Classroom

    cout << "\nDFS Traversal starting from Main Gate:\n";
    fill(visited, visited + N, false);
    DFS(0);

    cout << "\n\nBFS Traversal starting from Main Gate:\n";
    BFS(0);

    return 0;
}
