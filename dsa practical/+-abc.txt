#include <iostream>
#include <stack>
using namespace std;

// Define a tree node
struct Node {
    char data;
    Node* left;
    Node* right;

    Node(char val) : data(val), left(nullptr), right(nullptr) {}
};

// Check if a character is an operator
bool isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/';
}

// Build expression tree from prefix expression
Node* buildExpressionTree(const string& prefix) {
    stack<Node*> stk;

    // Traverse from right to left
    for (int i = prefix.length() - 1; i >= 0; --i) {
        char ch = prefix[i];
        Node* newNode = new Node(ch);

        if (isOperator(ch)) {
            newNode->left = stk.top(); stk.pop();
            newNode->right = stk.top(); stk.pop();
        }

        stk.push(newNode);
    }

    return stk.top(); // Root of the expression tree
}

// Non-recursive postorder traversal using two stacks
void postOrderNonRecursive(Node* root) {
    if (!root) return;

    stack<Node*> s1, s2;
    s1.push(root);

    while (!s1.empty()) {
        Node* temp = s1.top(); s1.pop();
        s2.push(temp);

        if (temp->left) s1.push(temp->left);
        if (temp->right) s1.push(temp->right);
    }

    cout << "\nPostorder traversal: ";
    while (!s2.empty()) {
        cout << s2.top()->data << " ";
        s2.pop();
    }
    cout << endl;
}

// Recursive deletion of the tree
void deleteTree(Node* root) {
    if (!root) return;

    deleteTree(root->left);
    deleteTree(root->right);

    cout << "Deleting node: " << root->data << endl;
    delete root;
}

int main() {
    string prefix = "+--a*bc/def";
    cout << "Building Expression Tree for prefix: " << prefix << endl;

    Node* root = buildExpressionTree(prefix);

    postOrderNonRecursive(root);

    deleteTree(root);
    cout << "\nTree deleted successfully." << endl;

    return 0;
}
